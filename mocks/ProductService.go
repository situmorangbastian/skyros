// Code generated by mockery v2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"

	skyros "github.com/situmorangbastian/skyros"
	mock "github.com/stretchr/testify/mock"
)

// ProductService is an autogenerated mock type for the ProductService type
type ProductService struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: ctx, filter
func (_m *ProductService) Fetch(ctx context.Context, filter skyros.Filter) ([]skyros.Product, string, error) {
	ret := _m.Called(ctx, filter)

	var r0 []skyros.Product
	if rf, ok := ret.Get(0).(func(context.Context, skyros.Filter) []skyros.Product); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]skyros.Product)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, skyros.Filter) string); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, skyros.Filter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Get provides a mock function with given fields: ctx, ID
func (_m *ProductService) Get(ctx context.Context, ID string) (skyros.Product, error) {
	ret := _m.Called(ctx, ID)

	var r0 skyros.Product
	if rf, ok := ret.Get(0).(func(context.Context, string) skyros.Product); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(skyros.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, product
func (_m *ProductService) Store(ctx context.Context, product skyros.Product) (skyros.Product, error) {
	ret := _m.Called(ctx, product)

	var r0 skyros.Product
	if rf, ok := ret.Get(0).(func(context.Context, skyros.Product) skyros.Product); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Get(0).(skyros.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, skyros.Product) error); ok {
		r1 = rf(ctx, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
