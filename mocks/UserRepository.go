// Code generated by mockery v2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"

	skyros "github.com/situmorangbastian/skyros"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// GetUser provides a mock function with given fields: ctx, identifier
func (_m *UserRepository) GetUser(ctx context.Context, identifier string) (skyros.User, error) {
	ret := _m.Called(ctx, identifier)

	var r0 skyros.User
	if rf, ok := ret.Get(0).(func(context.Context, string) skyros.User); ok {
		r0 = rf(ctx, identifier)
	} else {
		r0 = ret.Get(0).(skyros.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, identifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, user
func (_m *UserRepository) Register(ctx context.Context, user skyros.User) (skyros.User, error) {
	ret := _m.Called(ctx, user)

	var r0 skyros.User
	if rf, ok := ret.Get(0).(func(context.Context, skyros.User) skyros.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(skyros.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, skyros.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
