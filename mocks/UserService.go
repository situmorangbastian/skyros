// Code generated by mockery v2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"

	skyros "github.com/situmorangbastian/skyros"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *UserService) Login(ctx context.Context, email string, password string) (skyros.User, error) {
	ret := _m.Called(ctx, email, password)

	var r0 skyros.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string) skyros.User); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(skyros.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, user
func (_m *UserService) Register(ctx context.Context, user skyros.User) (skyros.User, error) {
	ret := _m.Called(ctx, user)

	var r0 skyros.User
	if rf, ok := ret.Get(0).(func(context.Context, skyros.User) skyros.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(skyros.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, skyros.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
