// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	orderservice "github.com/situmorangbastian/skyros/orderservice"
	mock "github.com/stretchr/testify/mock"
)

// OrderService is an autogenerated mock type for the OrderService type
type OrderService struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: ctx, filter
func (_m *OrderService) Fetch(ctx context.Context, filter orderservice.Filter) ([]orderservice.Order, string, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 []orderservice.Order
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, orderservice.Filter) ([]orderservice.Order, string, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, orderservice.Filter) []orderservice.Order); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]orderservice.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, orderservice.Filter) string); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, orderservice.Filter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Get provides a mock function with given fields: ctx, ID
func (_m *OrderService) Get(ctx context.Context, ID string) (orderservice.Order, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 orderservice.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (orderservice.Order, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) orderservice.Order); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(orderservice.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchStatus provides a mock function with given fields: ctx, ID, status
func (_m *OrderService) PatchStatus(ctx context.Context, ID string, status int) error {
	ret := _m.Called(ctx, ID, status)

	if len(ret) == 0 {
		panic("no return value specified for PatchStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, ID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: ctx, order
func (_m *OrderService) Store(ctx context.Context, order orderservice.Order) (orderservice.Order, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 orderservice.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, orderservice.Order) (orderservice.Order, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, orderservice.Order) orderservice.Order); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(orderservice.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, orderservice.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrderService creates a new instance of OrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderService {
	mock := &OrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
